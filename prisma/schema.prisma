// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// AUTHENTICATION & USER MANAGEMENT
// ============================================

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(FREE)
  
  // Subscription info
  stripeCustomerId       String?   @unique
  stripeSubscriptionId   String?   @unique
  stripePriceId          String?
  stripeCurrentPeriodEnd DateTime?
  
  accounts      Account[]
  sessions      Session[]
  
  // Learning progress
  flashcardProgress FlashcardProgress[]
  quizAttempts      QuizAttempt[]
  topicProgress     TopicProgress[]
  learningPath      LearningPath?
  diagnosticTests   DiagnosticTest[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum UserRole {
  FREE
  PREMIUM
  ADMIN
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ============================================
// CONTENT STRUCTURE
// ============================================

model Topic {
  id          String   @id @default(cuid())
  slug        String   @unique
  title       String
  description String
  order       Int
  category    Category @relation(fields: [categoryId], references: [id])
  categoryId  String
  
  // Content
  textContent      String
  exampleProblems  ExampleProblem[]
  videoUrl         String?         // Premium only
  videoThumbnail   String?
  
  // Learning materials
  flashcards    Flashcard[]
  quizzes       Quiz[]
  prerequisites Topic[]         @relation("TopicPrerequisites")
  dependents    Topic[]         @relation("TopicPrerequisites")
  
  // Progress tracking
  topicProgress TopicProgress[]
  
  isPremium Boolean @default(false)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id          String  @id @default(cuid())
  slug        String  @unique
  name        String
  description String?
  order       Int
  icon        String?
  
  topics Topic[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ExampleProblem {
  id          String @id @default(cuid())
  topicId     String
  topic       Topic  @relation(fields: [topicId], references: [id], onDelete: Cascade)
  
  question    String
  solution    String
  difficulty  Difficulty
  order       Int
  isPremium   Boolean @default(false)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
  EXPERT
}

// ============================================
// FLASHCARD SYSTEM
// ============================================

model Flashcard {
  id        String @id @default(cuid())
  topicId   String
  topic     Topic  @relation(fields: [topicId], references: [id], onDelete: Cascade)
  
  front     String
  back      String
  hint      String?
  
  // Spaced repetition fields (Premium only)
  isPremium Boolean @default(false)
  
  progress  FlashcardProgress[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FlashcardProgress {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  flashcardId String
  flashcard   Flashcard @relation(fields: [flashcardId], references: [id], onDelete: Cascade)
  
  // Spaced repetition algorithm (SM-2/Anki-style)
  easeFactor  Float    @default(2.5)
  interval    Int      @default(0)      // Days until next review
  repetitions Int      @default(0)
  nextReview  DateTime @default(now())
  
  lastReviewed DateTime @default(now())
  reviewCount  Int      @default(0)
  
  @@unique([userId, flashcardId])
}

// ============================================
// QUIZ SYSTEM
// ============================================

model Quiz {
  id          String @id @default(cuid())
  topicId     String
  topic       Topic  @relation(fields: [topicId], references: [id], onDelete: Cascade)
  
  title       String
  description String?
  timeLimit   Int?           // Minutes
  isPremium   Boolean        @default(false)
  isDiagnostic Boolean       @default(false)
  
  questions   QuizQuestion[]
  attempts    QuizAttempt[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model QuizQuestion {
  id       String @id @default(cuid())
  quizId   String
  quiz     Quiz   @relation(fields: [quizId], references: [id], onDelete: Cascade)
  
  question String
  type     QuestionType
  order    Int
  points   Int          @default(1)
  
  // Multiple choice - stored as JSON string
  options       String? // JSON array
  correctAnswer String?  // For multiple choice
  
  // Free response - stored as JSON string
  correctAnswers String? // JSON array of acceptable answers
  
  explanation String
  
  answers QuizAnswer[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum QuestionType {
  MULTIPLE_CHOICE
  FREE_RESPONSE
  TRUE_FALSE
}

model QuizAttempt {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  quizId    String
  quiz      Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  
  score     Float
  maxScore  Float
  timeSpent Int?     // Seconds
  completed Boolean  @default(false)
  
  answers   QuizAnswer[]
  
  startedAt  DateTime @default(now())
  completedAt DateTime?
}

model QuizAnswer {
  id             String       @id @default(cuid())
  attemptId      String
  attempt        QuizAttempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  questionId     String
  question       QuizQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  
  answer         String
  isCorrect      Boolean
  pointsEarned   Float
  
  createdAt DateTime @default(now())
}

// ============================================
// ADAPTIVE LEARNING SYSTEM
// ============================================

model TopicProgress {
  id             String   @id @default(cuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  topicId        String
  topic          Topic    @relation(fields: [topicId], references: [id], onDelete: Cascade)
  
  status         ProgressStatus @default(NOT_STARTED)
  masteryLevel   Float          @default(0) // 0-100
  
  timeSpent      Int            @default(0) // Seconds
  lastAccessed   DateTime       @default(now())
  completedAt    DateTime?
  
  @@unique([userId, topicId])
}

enum ProgressStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  MASTERED
}

model LearningPath {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Custom learning path based on diagnostic or user choice - stored as JSON string
  topicOrder    String? // JSON array of topic IDs
  currentTopic  String?
  
  startDate     DateTime @default(now())
  targetDate    DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DiagnosticTest {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  category  String   // e.g., "Limits", "Derivatives", etc.
  results   String   // JSON - Detailed results per topic
  
  weakAreas String? // JSON array - Topic IDs where user struggled
  strengths String? // JSON array - Topic IDs where user excelled
  
  createdAt DateTime @default(now())
}

// ============================================
// ANALYTICS & ENGAGEMENT
// ============================================

model DailyStreak {
  id           String   @id @default(cuid())
  userId       String   @unique
  currentStreak Int     @default(0)
  longestStreak Int     @default(0)
  lastActiveDate DateTime @default(now())
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Achievement {
  id          String @id @default(cuid())
  name        String
  description String
  icon        String
  category    String
  
  criteria    String // JSON - Flexible criteria definition
  
  userAchievements UserAchievement[]
  
  createdAt DateTime @default(now())
}

model UserAchievement {
  id            String      @id @default(cuid())
  userId        String
  achievementId String
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  
  unlockedAt DateTime @default(now())
  
  @@unique([userId, achievementId])
}
